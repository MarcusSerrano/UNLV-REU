# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Load the dataset
data = pd.read_csv('Data Set v2.csv')

# Ensure date and time are incorporated properly
data['Datetime'] = pd.to_datetime(data[['Year', 'Month', 'Day', 'Hour']])

# Split the data into training and testing sets based on the year
train_data = data[data['Datetime'] < '2021-01-01']
test_data = data[(data['Datetime'] >= '2021-01-01') & (data['Datetime'] <= '2023-12-31')]

# Drop unnecessary columns
train_data = train_data.drop(columns=['Year', 'Month', 'Day', 'Hour'])
test_data = test_data.drop(columns=['Year', 'Month', 'Day', 'Hour'])

# Feature and target split
X_train = train_data.drop(columns=['Gen', 'Datetime'])
y_train = train_data['Gen']
X_test = test_data.drop(columns=['Gen', 'Datetime'])
y_test = test_data['Gen']

# Normalize the data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Define and train the model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

# Get feature importances
importances = model.feature_importances_
features = X_train.columns

# Create a DataFrame for feature importances
importance_df = pd.DataFrame({
    'Feature': features,
    'Importance': importances
})

# Sort the DataFrame by importance
importance_df = importance_df.sort_values(by='Importance', ascending=False)

# Convert RGB to Hex
rgb_color = (177/255, 2/255, 2/255)

# Plot feature importances
plt.figure(figsize=(12, 8))
plt.barh(importance_df['Feature'], importance_df['Importance'], color=rgb_color)
plt.xlabel('Importance', fontsize=12)
plt.ylabel('Feature', fontsize=12)
plt.title('Feature Importance (Random Forest)', fontsize=16)
plt.gca().invert_yaxis()  # Invert y-axis to have the most important features on top
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.show()
